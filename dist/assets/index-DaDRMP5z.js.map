{"version":3,"file":"index-DaDRMP5z.js","sources":["../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapApiUtil.js","../../node_modules/@reown/appkit-controllers/dist/esm/src/utils/SwapCalculationUtil.js","../../node_modules/@reown/appkit-controllers/dist/esm/src/controllers/SwapController.js","../../node_modules/@reown/appkit-ui/dist/esm/src/composites/wui-token-button/styles.js","../../node_modules/@reown/appkit-ui/dist/esm/src/composites/wui-token-button/index.js"],"sourcesContent":["import { AccountController } from '../controllers/AccountController.js';\nimport { BlockchainApiController } from '../controllers/BlockchainApiController.js';\nimport { ChainController } from '../controllers/ChainController.js';\nimport { ConnectionController } from '../controllers/ConnectionController.js';\n// -- Controller ---------------------------------------- //\nexport const SwapApiUtil = {\n    async getTokenList() {\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        const response = await BlockchainApiController.fetchSwapTokens({\n            chainId: caipNetwork?.caipNetworkId\n        });\n        const tokens = response?.tokens?.map(token => ({\n            ...token,\n            eip2612: false,\n            quantity: {\n                decimals: '0',\n                numeric: '0'\n            },\n            price: 0,\n            value: 0\n        })) || [];\n        return tokens;\n    },\n    async fetchGasPrice() {\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!caipNetwork) {\n            return null;\n        }\n        try {\n            switch (caipNetwork.chainNamespace) {\n                case 'solana':\n                    // eslint-disable-next-line no-case-declarations\n                    const lamportsPerSignature = (await ConnectionController?.estimateGas({ chainNamespace: 'solana' }))?.toString();\n                    return {\n                        standard: lamportsPerSignature,\n                        fast: lamportsPerSignature,\n                        instant: lamportsPerSignature\n                    };\n                case 'eip155':\n                default:\n                    return await BlockchainApiController.fetchGasPrice({\n                        chainId: caipNetwork.caipNetworkId\n                    });\n            }\n        }\n        catch {\n            return null;\n        }\n    },\n    async fetchSwapAllowance({ tokenAddress, userAddress, sourceTokenAmount, sourceTokenDecimals }) {\n        const response = await BlockchainApiController.fetchSwapAllowance({\n            tokenAddress,\n            userAddress\n        });\n        if (response?.allowance && sourceTokenAmount && sourceTokenDecimals) {\n            const parsedValue = ConnectionController.parseUnits(sourceTokenAmount, sourceTokenDecimals) || 0;\n            const hasAllowance = BigInt(response.allowance) >= parsedValue;\n            return hasAllowance;\n        }\n        return false;\n    },\n    async getMyTokensWithBalance(forceUpdate) {\n        const address = AccountController.state.address;\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!address || !caipNetwork) {\n            return [];\n        }\n        const response = await BlockchainApiController.getBalance(address, caipNetwork.caipNetworkId, forceUpdate);\n        /*\n         * The 1Inch API includes many low-quality tokens in the balance response,\n         * which appear inconsistently. This filter prevents them from being displayed.\n         */\n        const balances = response.balances.filter(balance => balance.quantity.decimals !== '0');\n        AccountController.setTokenBalance(balances, ChainController.state.activeChain);\n        return this.mapBalancesToSwapTokens(balances);\n    },\n    mapBalancesToSwapTokens(balances) {\n        return (balances?.map(token => ({\n            ...token,\n            address: token?.address\n                ? token.address\n                : ChainController.getActiveNetworkTokenAddress(),\n            decimals: parseInt(token.quantity.decimals, 10),\n            logoUri: token.iconUrl,\n            eip2612: false\n        })) || []);\n    }\n};\n//# sourceMappingURL=SwapApiUtil.js.map","// -- Types --------------------------------------------- //\nimport { NumberUtil } from '@reown/appkit-common';\n// -- Util ---------------------------------------- //\nexport const SwapCalculationUtil = {\n    getGasPriceInEther(gas, gasPrice) {\n        const totalGasCostInWei = gasPrice * gas;\n        const totalGasCostInEther = Number(totalGasCostInWei) / 1e18;\n        return totalGasCostInEther;\n    },\n    getGasPriceInUSD(networkPrice, gas, gasPrice) {\n        const totalGasCostInEther = SwapCalculationUtil.getGasPriceInEther(gas, gasPrice);\n        const networkPriceInUSD = NumberUtil.bigNumber(networkPrice);\n        const gasCostInUSD = networkPriceInUSD.times(totalGasCostInEther);\n        return gasCostInUSD.toNumber();\n    },\n    getPriceImpact({ sourceTokenAmount, sourceTokenPriceInUSD, toTokenPriceInUSD, toTokenAmount }) {\n        const inputValue = NumberUtil.bigNumber(sourceTokenAmount).times(sourceTokenPriceInUSD);\n        const outputValue = NumberUtil.bigNumber(toTokenAmount).times(toTokenPriceInUSD);\n        const priceImpact = inputValue.minus(outputValue).div(inputValue).times(100);\n        return priceImpact.toNumber();\n    },\n    getMaxSlippage(slippage, toTokenAmount) {\n        const slippageToleranceDecimal = NumberUtil.bigNumber(slippage).div(100);\n        const maxSlippageAmount = NumberUtil.multiply(toTokenAmount, slippageToleranceDecimal);\n        return maxSlippageAmount.toNumber();\n    },\n    getProviderFee(sourceTokenAmount, feePercentage = 0.0085) {\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(feePercentage);\n        return providerFee.toString();\n    },\n    isInsufficientNetworkTokenForGas(networkBalanceInUSD, gasPriceInUSD) {\n        const gasPrice = gasPriceInUSD || '0';\n        if (NumberUtil.bigNumber(networkBalanceInUSD).eq(0)) {\n            return true;\n        }\n        return NumberUtil.bigNumber(NumberUtil.bigNumber(gasPrice)).gt(networkBalanceInUSD);\n    },\n    isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, balance) {\n        const sourceTokenBalance = balance?.find(token => token.address === sourceTokenAddress)\n            ?.quantity?.numeric;\n        const isInSufficientBalance = NumberUtil.bigNumber(sourceTokenBalance || '0').lt(sourceTokenAmount);\n        return isInSufficientBalance;\n    },\n    getToTokenAmount({ sourceToken, toToken, sourceTokenPrice, toTokenPrice, sourceTokenAmount }) {\n        if (sourceTokenAmount === '0') {\n            return '0';\n        }\n        if (!sourceToken || !toToken) {\n            return '0';\n        }\n        const sourceTokenDecimals = sourceToken.decimals;\n        const sourceTokenPriceInUSD = sourceTokenPrice;\n        const toTokenDecimals = toToken.decimals;\n        const toTokenPriceInUSD = toTokenPrice;\n        if (toTokenPriceInUSD <= 0) {\n            return '0';\n        }\n        // Calculate the provider fee (0.85% of the source token amount)\n        const providerFee = NumberUtil.bigNumber(sourceTokenAmount).times(0.0085);\n        // Adjust the source token amount by subtracting the provider fee\n        const adjustedSourceTokenAmount = NumberUtil.bigNumber(sourceTokenAmount).minus(providerFee);\n        // Proceed with conversion using the adjusted source token amount\n        const sourceAmountInSmallestUnit = adjustedSourceTokenAmount.times(NumberUtil.bigNumber(10).pow(sourceTokenDecimals));\n        const priceRatio = NumberUtil.bigNumber(sourceTokenPriceInUSD).div(toTokenPriceInUSD);\n        const decimalDifference = sourceTokenDecimals - toTokenDecimals;\n        const toTokenAmountInSmallestUnit = sourceAmountInSmallestUnit\n            .times(priceRatio)\n            .div(NumberUtil.bigNumber(10).pow(decimalDifference));\n        const toTokenAmount = toTokenAmountInSmallestUnit.div(NumberUtil.bigNumber(10).pow(toTokenDecimals));\n        const amount = toTokenAmount.toFixed(toTokenDecimals).toString();\n        return amount;\n    }\n};\n//# sourceMappingURL=SwapCalculationUtil.js.map","import { proxy, subscribe as sub } from 'valtio/vanilla';\nimport { subscribeKey as subKey } from 'valtio/vanilla/utils';\nimport { NumberUtil } from '@reown/appkit-common';\nimport { ConstantsUtil as CommonConstantsUtil } from '@reown/appkit-common';\nimport { W3mFrameRpcConstants } from '@reown/appkit-wallet/utils';\nimport { ConstantsUtil } from '../utils/ConstantsUtil.js';\nimport { CoreHelperUtil } from '../utils/CoreHelperUtil.js';\nimport { SendApiUtil } from '../utils/SendApiUtil.js';\nimport { SwapApiUtil } from '../utils/SwapApiUtil.js';\nimport { SwapCalculationUtil } from '../utils/SwapCalculationUtil.js';\nimport { AccountController } from './AccountController.js';\nimport { AlertController } from './AlertController.js';\nimport { BlockchainApiController } from './BlockchainApiController.js';\nimport { ChainController } from './ChainController.js';\nimport { ConnectionController } from './ConnectionController.js';\nimport { ConnectorController } from './ConnectorController.js';\nimport { EventsController } from './EventsController.js';\nimport { RouterController } from './RouterController.js';\nimport { SnackController } from './SnackController.js';\n// -- Constants ---------------------------------------- //\nexport const INITIAL_GAS_LIMIT = 150000;\nexport const TO_AMOUNT_DECIMALS = 6;\nclass TransactionError extends Error {\n    constructor(message, shortMessage) {\n        super(message);\n        this.name = 'TransactionError';\n        this.shortMessage = shortMessage;\n    }\n}\n// -- State --------------------------------------------- //\nconst initialState = {\n    // Loading states\n    initializing: false,\n    initialized: false,\n    loadingPrices: false,\n    loadingQuote: false,\n    loadingApprovalTransaction: false,\n    loadingBuildTransaction: false,\n    loadingTransaction: false,\n    // Error states\n    fetchError: false,\n    // Approval & Swap transaction states\n    approvalTransaction: undefined,\n    swapTransaction: undefined,\n    transactionError: undefined,\n    // Input values\n    sourceToken: undefined,\n    sourceTokenAmount: '',\n    sourceTokenPriceInUSD: 0,\n    toToken: undefined,\n    toTokenAmount: '',\n    toTokenPriceInUSD: 0,\n    networkPrice: '0',\n    networkBalanceInUSD: '0',\n    networkTokenSymbol: '',\n    inputError: undefined,\n    // Request values\n    slippage: ConstantsUtil.CONVERT_SLIPPAGE_TOLERANCE,\n    // Tokens\n    tokens: undefined,\n    popularTokens: undefined,\n    suggestedTokens: undefined,\n    foundTokens: undefined,\n    myTokensWithBalance: undefined,\n    tokensPriceMap: {},\n    // Calculations\n    gasFee: '0',\n    gasPriceInUSD: 0,\n    priceImpact: undefined,\n    maxSlippage: undefined,\n    providerFee: undefined\n};\nconst state = proxy(initialState);\n// -- Controller ---------------------------------------- //\nexport const SwapController = {\n    state,\n    subscribe(callback) {\n        return sub(state, () => callback(state));\n    },\n    subscribeKey(key, callback) {\n        return subKey(state, key, callback);\n    },\n    getParams() {\n        const caipAddress = ChainController.state.activeCaipAddress;\n        const namespace = ChainController.state.activeChain;\n        const address = CoreHelperUtil.getPlainAddress(caipAddress);\n        const networkAddress = ChainController.getActiveNetworkTokenAddress();\n        const connectorId = ConnectorController.getConnectorId(namespace);\n        if (!address) {\n            throw new Error('No address found to swap the tokens from.');\n        }\n        const invalidToToken = !state.toToken?.address || !state.toToken?.decimals;\n        const invalidSourceToken = !state.sourceToken?.address ||\n            !state.sourceToken?.decimals ||\n            !NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        const invalidSourceTokenAmount = !state.sourceTokenAmount;\n        return {\n            networkAddress,\n            fromAddress: address,\n            fromCaipAddress: caipAddress,\n            sourceTokenAddress: state.sourceToken?.address,\n            toTokenAddress: state.toToken?.address,\n            toTokenAmount: state.toTokenAmount,\n            toTokenDecimals: state.toToken?.decimals,\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenDecimals: state.sourceToken?.decimals,\n            invalidToToken,\n            invalidSourceToken,\n            invalidSourceTokenAmount,\n            availableToSwap: caipAddress && !invalidToToken && !invalidSourceToken && !invalidSourceTokenAmount,\n            isAuthConnector: connectorId === CommonConstantsUtil.CONNECTOR_ID.AUTH\n        };\n    },\n    setSourceToken(sourceToken) {\n        if (!sourceToken) {\n            state.sourceToken = sourceToken;\n            state.sourceTokenAmount = '';\n            state.sourceTokenPriceInUSD = 0;\n            return;\n        }\n        state.sourceToken = sourceToken;\n        this.setTokenPrice(sourceToken.address, 'sourceToken');\n    },\n    setSourceTokenAmount(amount) {\n        state.sourceTokenAmount = amount;\n    },\n    setToToken(toToken) {\n        if (!toToken) {\n            state.toToken = toToken;\n            state.toTokenAmount = '';\n            state.toTokenPriceInUSD = 0;\n            return;\n        }\n        state.toToken = toToken;\n        this.setTokenPrice(toToken.address, 'toToken');\n    },\n    setToTokenAmount(amount) {\n        state.toTokenAmount = amount\n            ? NumberUtil.formatNumberToLocalString(amount, TO_AMOUNT_DECIMALS)\n            : '';\n    },\n    async setTokenPrice(address, target) {\n        let price = state.tokensPriceMap[address] || 0;\n        if (!price) {\n            state.loadingPrices = true;\n            price = await this.getAddressPrice(address);\n        }\n        if (target === 'sourceToken') {\n            state.sourceTokenPriceInUSD = price;\n        }\n        else if (target === 'toToken') {\n            state.toTokenPriceInUSD = price;\n        }\n        if (state.loadingPrices) {\n            state.loadingPrices = false;\n        }\n        if (this.getParams().availableToSwap) {\n            this.swapTokens();\n        }\n    },\n    switchTokens() {\n        if (state.initializing || !state.initialized) {\n            return;\n        }\n        const newSourceToken = state.toToken ? { ...state.toToken } : undefined;\n        const newToToken = state.sourceToken ? { ...state.sourceToken } : undefined;\n        const newSourceTokenAmount = newSourceToken && state.toTokenAmount === '' ? '1' : state.toTokenAmount;\n        this.setSourceToken(newSourceToken);\n        this.setToToken(newToToken);\n        this.setSourceTokenAmount(newSourceTokenAmount);\n        this.setToTokenAmount('');\n        this.swapTokens();\n    },\n    resetState() {\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n        state.tokensPriceMap = initialState.tokensPriceMap;\n        state.initialized = initialState.initialized;\n        state.sourceToken = initialState.sourceToken;\n        state.sourceTokenAmount = initialState.sourceTokenAmount;\n        state.sourceTokenPriceInUSD = initialState.sourceTokenPriceInUSD;\n        state.toToken = initialState.toToken;\n        state.toTokenAmount = initialState.toTokenAmount;\n        state.toTokenPriceInUSD = initialState.toTokenPriceInUSD;\n        state.networkPrice = initialState.networkPrice;\n        state.networkTokenSymbol = initialState.networkTokenSymbol;\n        state.networkBalanceInUSD = initialState.networkBalanceInUSD;\n        state.inputError = initialState.inputError;\n        state.myTokensWithBalance = initialState.myTokensWithBalance;\n    },\n    resetValues() {\n        const { networkAddress } = this.getParams();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        this.setSourceToken(networkToken);\n        this.setToToken(undefined);\n    },\n    getApprovalLoadingState() {\n        return state.loadingApprovalTransaction;\n    },\n    clearError() {\n        state.transactionError = undefined;\n    },\n    async initializeState() {\n        if (state.initializing) {\n            return;\n        }\n        state.initializing = true;\n        if (!state.initialized) {\n            try {\n                await this.fetchTokens();\n                state.initialized = true;\n            }\n            catch (error) {\n                state.initialized = false;\n                SnackController.showError('Failed to initialize swap');\n                RouterController.goBack();\n            }\n        }\n        state.initializing = false;\n    },\n    async fetchTokens() {\n        const { networkAddress } = this.getParams();\n        await this.getTokenList();\n        await this.getNetworkTokenPrice();\n        await this.getMyTokensWithBalance();\n        const networkToken = state.tokens?.find(token => token.address === networkAddress);\n        if (networkToken) {\n            state.networkTokenSymbol = networkToken.symbol;\n            this.setSourceToken(networkToken);\n            this.setSourceTokenAmount('1');\n        }\n    },\n    async getTokenList() {\n        const tokens = await SwapApiUtil.getTokenList();\n        state.tokens = tokens;\n        state.popularTokens = tokens.sort((aTokenInfo, bTokenInfo) => {\n            if (aTokenInfo.symbol < bTokenInfo.symbol) {\n                return -1;\n            }\n            if (aTokenInfo.symbol > bTokenInfo.symbol) {\n                return 1;\n            }\n            return 0;\n        });\n        state.suggestedTokens = tokens.filter(token => {\n            if (ConstantsUtil.SWAP_SUGGESTED_TOKENS.includes(token.symbol)) {\n                return true;\n            }\n            return false;\n        }, {});\n    },\n    async getAddressPrice(address) {\n        const existPrice = state.tokensPriceMap[address];\n        if (existPrice) {\n            return existPrice;\n        }\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [address]\n        });\n        const fungibles = response?.fungibles || [];\n        const allTokens = [...(state.tokens || []), ...(state.myTokensWithBalance || [])];\n        const symbol = allTokens?.find(token => token.address === address)?.symbol;\n        const price = fungibles.find(p => p.symbol.toLowerCase() === symbol?.toLowerCase())?.price || 0;\n        const priceAsFloat = parseFloat(price.toString());\n        state.tokensPriceMap[address] = priceAsFloat;\n        return priceAsFloat;\n    },\n    async getNetworkTokenPrice() {\n        const { networkAddress } = this.getParams();\n        const response = await BlockchainApiController.fetchTokenPrice({\n            addresses: [networkAddress]\n        }).catch(() => {\n            SnackController.showError('Failed to fetch network token price');\n            return { fungibles: [] };\n        });\n        const token = response.fungibles?.[0];\n        const price = token?.price.toString() || '0';\n        state.tokensPriceMap[networkAddress] = parseFloat(price);\n        state.networkTokenSymbol = token?.symbol || '';\n        state.networkPrice = price;\n    },\n    async getMyTokensWithBalance(forceUpdate) {\n        const balances = await SendApiUtil.getMyTokensWithBalance(forceUpdate);\n        const swapBalances = SendApiUtil.mapBalancesToSwapTokens(balances);\n        if (!swapBalances) {\n            return;\n        }\n        await this.getInitialGasPrice();\n        this.setBalances(swapBalances);\n    },\n    setBalances(balances) {\n        const { networkAddress } = this.getParams();\n        const caipNetwork = ChainController.state.activeCaipNetwork;\n        if (!caipNetwork) {\n            return;\n        }\n        const networkToken = balances.find(token => token.address === networkAddress);\n        balances.forEach(token => {\n            state.tokensPriceMap[token.address] = token.price || 0;\n        });\n        state.myTokensWithBalance = balances.filter(token => token.address.startsWith(caipNetwork.caipNetworkId));\n        state.networkBalanceInUSD = networkToken\n            ? NumberUtil.multiply(networkToken.quantity.numeric, networkToken.price).toString()\n            : '0';\n    },\n    async getInitialGasPrice() {\n        const res = await SwapApiUtil.fetchGasPrice();\n        if (!res) {\n            return { gasPrice: null, gasPriceInUSD: null };\n        }\n        switch (ChainController.state?.activeCaipNetwork?.chainNamespace) {\n            case 'solana':\n                state.gasFee = res.standard ?? '0';\n                state.gasPriceInUSD = NumberUtil.multiply(res.standard, state.networkPrice)\n                    .div(1e9)\n                    .toNumber();\n                return {\n                    gasPrice: BigInt(state.gasFee),\n                    gasPriceInUSD: Number(state.gasPriceInUSD)\n                };\n            case 'eip155':\n            default:\n                // eslint-disable-next-line no-case-declarations\n                const value = res.standard ?? '0';\n                // eslint-disable-next-line no-case-declarations\n                const gasFee = BigInt(value);\n                // eslint-disable-next-line no-case-declarations\n                const gasLimit = BigInt(INITIAL_GAS_LIMIT);\n                // eslint-disable-next-line no-case-declarations\n                const gasPrice = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gasLimit, gasFee);\n                state.gasFee = value;\n                state.gasPriceInUSD = gasPrice;\n                return { gasPrice: gasFee, gasPriceInUSD: gasPrice };\n        }\n    },\n    // -- Swap -------------------------------------- //\n    async swapTokens() {\n        const address = AccountController.state.address;\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        const haveSourceTokenAmount = NumberUtil.bigNumber(state.sourceTokenAmount).gt(0);\n        if (!haveSourceTokenAmount) {\n            this.setToTokenAmount('');\n        }\n        if (!toToken || !sourceToken || state.loadingPrices || !haveSourceTokenAmount) {\n            return;\n        }\n        state.loadingQuote = true;\n        const amountDecimal = NumberUtil.bigNumber(state.sourceTokenAmount)\n            .times(10 ** sourceToken.decimals)\n            .round(0);\n        try {\n            const quoteResponse = await BlockchainApiController.fetchSwapQuote({\n                userAddress: address,\n                from: sourceToken.address,\n                to: toToken.address,\n                gasPrice: state.gasFee,\n                amount: amountDecimal.toString()\n            });\n            state.loadingQuote = false;\n            const quoteToAmount = quoteResponse?.quotes?.[0]?.toAmount;\n            if (!quoteToAmount) {\n                AlertController.open({\n                    shortMessage: 'Incorrect amount',\n                    longMessage: 'Please enter a valid amount'\n                }, 'error');\n                return;\n            }\n            const toTokenAmount = NumberUtil.bigNumber(quoteToAmount)\n                .div(10 ** toToken.decimals)\n                .toString();\n            this.setToTokenAmount(toTokenAmount);\n            const isInsufficientToken = this.hasInsufficientToken(state.sourceTokenAmount, sourceToken.address);\n            if (isInsufficientToken) {\n                state.inputError = 'Insufficient balance';\n            }\n            else {\n                state.inputError = undefined;\n                this.setTransactionDetails();\n            }\n        }\n        catch (error) {\n            state.loadingQuote = false;\n            state.inputError = 'Insufficient balance';\n        }\n    },\n    // -- Create Transactions -------------------------------------- //\n    async getTransaction() {\n        const { fromCaipAddress, availableToSwap } = this.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !availableToSwap || !sourceToken || !toToken || state.loadingQuote) {\n            return undefined;\n        }\n        try {\n            state.loadingBuildTransaction = true;\n            const hasAllowance = await SwapApiUtil.fetchSwapAllowance({\n                userAddress: fromCaipAddress,\n                tokenAddress: sourceToken.address,\n                sourceTokenAmount: state.sourceTokenAmount,\n                sourceTokenDecimals: sourceToken.decimals\n            });\n            let transaction = undefined;\n            if (hasAllowance) {\n                transaction = await this.createSwapTransaction();\n            }\n            else {\n                transaction = await this.createAllowanceTransaction();\n            }\n            state.loadingBuildTransaction = false;\n            state.fetchError = false;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to check allowance');\n            state.loadingBuildTransaction = false;\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createAllowanceTransaction() {\n        const { fromCaipAddress, sourceTokenAddress, fromAddress, toTokenAddress } = this.getParams();\n        if (!fromCaipAddress || !toTokenAddress) {\n            return undefined;\n        }\n        if (!sourceTokenAddress) {\n            throw new Error('createAllowanceTransaction - No source token address found.');\n        }\n        try {\n            const response = await BlockchainApiController.generateApproveCalldata({\n                from: sourceTokenAddress,\n                to: toTokenAddress,\n                userAddress: fromCaipAddress\n            });\n            const gasLimit = await ConnectionController.estimateGas({\n                chainNamespace: CommonConstantsUtil.CHAIN.EVM,\n                address: fromAddress,\n                to: CoreHelperUtil.getPlainAddress(response.tx.to),\n                data: response.tx.data\n            });\n            const transaction = {\n                data: response.tx.data,\n                to: CoreHelperUtil.getPlainAddress(response.tx.from),\n                gas: gasLimit,\n                gasPrice: BigInt(response.tx.eip155.gasPrice),\n                value: BigInt(response.tx.value),\n                toAmount: state.toTokenAmount\n            };\n            state.swapTransaction = undefined;\n            state.approvalTransaction = {\n                data: transaction.data,\n                to: transaction.to,\n                gas: transaction.gas ?? BigInt(0),\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n            return {\n                data: transaction.data,\n                to: transaction.to,\n                gas: transaction.gas ?? BigInt(0),\n                gasPrice: transaction.gasPrice,\n                value: transaction.value,\n                toAmount: transaction.toAmount\n            };\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create approval transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    async createSwapTransaction() {\n        const { networkAddress, fromCaipAddress, sourceTokenAmount } = this.getParams();\n        const sourceToken = state.sourceToken;\n        const toToken = state.toToken;\n        if (!fromCaipAddress || !sourceTokenAmount || !sourceToken || !toToken) {\n            return undefined;\n        }\n        const amount = ConnectionController.parseUnits(sourceTokenAmount, sourceToken.decimals)?.toString();\n        try {\n            const response = await BlockchainApiController.generateSwapCalldata({\n                userAddress: fromCaipAddress,\n                from: sourceToken.address,\n                to: toToken.address,\n                amount: amount,\n                disableEstimate: true\n            });\n            const isSourceTokenIsNetworkToken = sourceToken.address === networkAddress;\n            const gas = BigInt(response.tx.eip155.gas);\n            const gasPrice = BigInt(response.tx.eip155.gasPrice);\n            const transaction = {\n                data: response.tx.data,\n                to: CoreHelperUtil.getPlainAddress(response.tx.to),\n                gas,\n                gasPrice,\n                value: isSourceTokenIsNetworkToken ? BigInt(amount ?? '0') : BigInt('0'),\n                toAmount: state.toTokenAmount\n            };\n            state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, gas, gasPrice);\n            state.approvalTransaction = undefined;\n            state.swapTransaction = transaction;\n            return transaction;\n        }\n        catch (error) {\n            RouterController.goBack();\n            SnackController.showError('Failed to create transaction');\n            state.approvalTransaction = undefined;\n            state.swapTransaction = undefined;\n            state.fetchError = true;\n            return undefined;\n        }\n    },\n    // -- Send Transactions --------------------------------- //\n    async sendTransactionForApproval(data) {\n        const { fromAddress, isAuthConnector } = this.getParams();\n        state.loadingApprovalTransaction = true;\n        const approveLimitMessage = `Approve limit increase in your wallet`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                view: null,\n                goBack: true,\n                onSuccess() {\n                    SnackController.showLoading(approveLimitMessage);\n                }\n            });\n        }\n        else {\n            SnackController.showLoading(approveLimitMessage);\n        }\n        try {\n            await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: 'eip155'\n            });\n            await this.swapTokens();\n            await this.getTransaction();\n            state.approvalTransaction = undefined;\n            state.loadingApprovalTransaction = false;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.shortMessage;\n            state.loadingApprovalTransaction = false;\n            SnackController.showError(error?.shortMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_APPROVAL_ERROR',\n                properties: {\n                    message: error?.shortMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: this.state.sourceToken?.symbol || '',\n                    swapToToken: this.state.toToken?.symbol || '',\n                    swapFromAmount: this.state.sourceTokenAmount || '',\n                    swapToAmount: this.state.toTokenAmount || '',\n                    isSmartAccount: AccountController.state.preferredAccountTypes?.eip155 ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n        }\n    },\n    async sendTransactionForSwap(data) {\n        if (!data) {\n            return undefined;\n        }\n        const { fromAddress, toTokenAmount, isAuthConnector } = this.getParams();\n        state.loadingTransaction = true;\n        const snackbarPendingMessage = `Swapping ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        const snackbarSuccessMessage = `Swapped ${state.sourceToken?.symbol} to ${NumberUtil.formatNumberToLocalString(toTokenAmount, 3)} ${state.toToken?.symbol}`;\n        if (isAuthConnector) {\n            RouterController.pushTransactionStack({\n                view: 'Account',\n                goBack: false,\n                onSuccess() {\n                    SnackController.showLoading(snackbarPendingMessage);\n                    SwapController.resetState();\n                }\n            });\n        }\n        else {\n            SnackController.showLoading('Confirm transaction in your wallet');\n        }\n        try {\n            const forceUpdateAddresses = [state.sourceToken?.address, state.toToken?.address].join(',');\n            const transactionHash = await ConnectionController.sendTransaction({\n                address: fromAddress,\n                to: data.to,\n                data: data.data,\n                value: data.value,\n                chainNamespace: 'eip155'\n            });\n            state.loadingTransaction = false;\n            SnackController.showSuccess(snackbarSuccessMessage);\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_SUCCESS',\n                properties: {\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: this.state.sourceToken?.symbol || '',\n                    swapToToken: this.state.toToken?.symbol || '',\n                    swapFromAmount: this.state.sourceTokenAmount || '',\n                    swapToAmount: this.state.toTokenAmount || '',\n                    isSmartAccount: AccountController.state.preferredAccountTypes?.eip155 ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            SwapController.resetState();\n            if (!isAuthConnector) {\n                RouterController.replace('Account');\n            }\n            SwapController.getMyTokensWithBalance(forceUpdateAddresses);\n            return transactionHash;\n        }\n        catch (err) {\n            const error = err;\n            state.transactionError = error?.shortMessage;\n            state.loadingTransaction = false;\n            SnackController.showError(error?.shortMessage || 'Transaction error');\n            EventsController.sendEvent({\n                type: 'track',\n                event: 'SWAP_ERROR',\n                properties: {\n                    message: error?.shortMessage || error?.message || 'Unknown',\n                    network: ChainController.state.activeCaipNetwork?.caipNetworkId || '',\n                    swapFromToken: this.state.sourceToken?.symbol || '',\n                    swapToToken: this.state.toToken?.symbol || '',\n                    swapFromAmount: this.state.sourceTokenAmount || '',\n                    swapToAmount: this.state.toTokenAmount || '',\n                    isSmartAccount: AccountController.state.preferredAccountTypes?.eip155 ===\n                        W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT\n                }\n            });\n            return undefined;\n        }\n    },\n    // -- Checks -------------------------------------------- //\n    hasInsufficientToken(sourceTokenAmount, sourceTokenAddress) {\n        const isInsufficientSourceTokenForSwap = SwapCalculationUtil.isInsufficientSourceTokenForSwap(sourceTokenAmount, sourceTokenAddress, state.myTokensWithBalance);\n        let insufficientNetworkTokenForGas = true;\n        if (AccountController.state.preferredAccountTypes?.eip155 ===\n            W3mFrameRpcConstants.ACCOUNT_TYPES.SMART_ACCOUNT) {\n            // Smart Accounts may pay gas in any ERC20 token\n            insufficientNetworkTokenForGas = false;\n        }\n        else {\n            insufficientNetworkTokenForGas = SwapCalculationUtil.isInsufficientNetworkTokenForGas(state.networkBalanceInUSD, state.gasPriceInUSD);\n        }\n        return insufficientNetworkTokenForGas || isInsufficientSourceTokenForSwap;\n    },\n    // -- Calculations -------------------------------------- //\n    setTransactionDetails() {\n        const { toTokenAddress, toTokenDecimals } = this.getParams();\n        if (!toTokenAddress || !toTokenDecimals) {\n            return;\n        }\n        state.gasPriceInUSD = SwapCalculationUtil.getGasPriceInUSD(state.networkPrice, BigInt(state.gasFee), BigInt(INITIAL_GAS_LIMIT));\n        state.priceImpact = SwapCalculationUtil.getPriceImpact({\n            sourceTokenAmount: state.sourceTokenAmount,\n            sourceTokenPriceInUSD: state.sourceTokenPriceInUSD,\n            toTokenPriceInUSD: state.toTokenPriceInUSD,\n            toTokenAmount: state.toTokenAmount\n        });\n        state.maxSlippage = SwapCalculationUtil.getMaxSlippage(state.slippage, state.toTokenAmount);\n        state.providerFee = SwapCalculationUtil.getProviderFee(state.sourceTokenAmount);\n    }\n};\n//# sourceMappingURL=SwapController.js.map","import { css } from 'lit';\nexport default css `\n  :host {\n    display: block;\n  }\n\n  :host > button {\n    gap: var(--wui-spacing-xxs);\n    padding: var(--wui-spacing-xs);\n    padding-right: var(--wui-spacing-1xs);\n    height: 40px;\n    border-radius: var(--wui-border-radius-l);\n    background: var(--wui-color-gray-glass-002);\n    border-width: 0px;\n    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-002);\n  }\n\n  :host > button wui-image {\n    width: 24px;\n    height: 24px;\n    border-radius: var(--wui-border-radius-s);\n    box-shadow: inset 0 0 0 1px var(--wui-color-gray-glass-010);\n  }\n`;\n//# sourceMappingURL=styles.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport '../../components/wui-image/index.js';\nimport '../../components/wui-text/index.js';\nimport { elementStyles, resetStyles } from '../../utils/ThemeUtil.js';\nimport { customElement } from '../../utils/WebComponentsUtil.js';\nimport '../wui-icon-box/index.js';\nimport styles from './styles.js';\nlet WuiTokenButton = class WuiTokenButton extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.text = '';\n    }\n    render() {\n        return html `\n      <button>\n        ${this.tokenTemplate()}\n        <wui-text variant=\"paragraph-600\" color=\"fg-100\">${this.text}</wui-text>\n      </button>\n    `;\n    }\n    tokenTemplate() {\n        if (this.imageSrc) {\n            return html `<wui-image src=${this.imageSrc}></wui-image>`;\n        }\n        return html `\n      <wui-icon-box\n        size=\"sm\"\n        iconColor=\"fg-200\"\n        backgroundColor=\"fg-300\"\n        icon=\"networkPlaceholder\"\n      ></wui-icon-box>\n    `;\n    }\n};\nWuiTokenButton.styles = [resetStyles, elementStyles, styles];\n__decorate([\n    property()\n], WuiTokenButton.prototype, \"imageSrc\", void 0);\n__decorate([\n    property()\n], WuiTokenButton.prototype, \"text\", void 0);\nWuiTokenButton = __decorate([\n    customElement('wui-token-button')\n], WuiTokenButton);\nexport { WuiTokenButton };\n//# sourceMappingURL=index.js.map"],"names":["SwapApiUtil","caipNetwork","ChainController","response","BlockchainApiController","_a","token","lamportsPerSignature","_b","ConnectionController","tokenAddress","userAddress","sourceTokenAmount","sourceTokenDecimals","parsedValue","forceUpdate","address","AccountController","balances","balance","SwapCalculationUtil","gas","gasPrice","totalGasCostInWei","networkPrice","totalGasCostInEther","NumberUtil","sourceTokenPriceInUSD","toTokenPriceInUSD","toTokenAmount","inputValue","outputValue","slippage","slippageToleranceDecimal","feePercentage","networkBalanceInUSD","gasPriceInUSD","sourceTokenAddress","sourceTokenBalance","sourceToken","toToken","sourceTokenPrice","toTokenPrice","toTokenDecimals","providerFee","sourceAmountInSmallestUnit","priceRatio","decimalDifference","INITIAL_GAS_LIMIT","TO_AMOUNT_DECIMALS","initialState","ConstantsUtil","state","proxy","SwapController","callback","sub","key","subKey","caipAddress","namespace","CoreHelperUtil","networkAddress","connectorId","ConnectorController","invalidToToken","invalidSourceToken","_c","_d","invalidSourceTokenAmount","_e","_f","_g","_h","CommonConstantsUtil","amount","target","price","newSourceToken","newToToken","newSourceTokenAmount","networkToken","SnackController","RouterController","tokens","aTokenInfo","bTokenInfo","existPrice","fungibles","allTokens","symbol","p","priceAsFloat","SendApiUtil","swapBalances","res","value","gasFee","gasLimit","haveSourceTokenAmount","amountDecimal","quoteResponse","quoteToAmount","AlertController","fromCaipAddress","availableToSwap","hasAllowance","transaction","fromAddress","toTokenAddress","isSourceTokenIsNetworkToken","data","isAuthConnector","approveLimitMessage","err","error","EventsController","W3mFrameRpcConstants","snackbarPendingMessage","snackbarSuccessMessage","forceUpdateAddresses","transactionHash","_i","_j","_k","_l","_m","_n","isInsufficientSourceTokenForSwap","insufficientNetworkTokenForGas","styles","css","__decorate","decorators","desc","c","d","i","WuiTokenButton","LitElement","html","resetStyles","elementStyles","property","customElement"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}